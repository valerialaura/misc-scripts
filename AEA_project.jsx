/* Collection of Tools to use in other scripts AEA_project project and composition utils  version: 0.2 author: valerialaura (www.valerialaura.com.ar) date: February 2017    changelog:  -     to-do:  - so much   *//*    COMPOSITION AND PROJECT UTILS    createCompFromComp    searchInFolder    projectItemSearch    projectItemSearchVec    itemSearch    itemSearchVec    */function createCompFromComp (myComp, myName) {     try{        var newComp;        newComp = app.project.items.addComp(myName, myComp.width, myComp.height, 1, myComp.duration, myComp.frameRate);        newComp.layers.add(myComp);     //Adds file to comp        return newComp;    } catch(err){       // alert("Error at line# " + err.line.toString() + "\r" + err.toString());       return null;    }}function searchInFolder (name, folderName) {    var myElem = null; // assume the worst    currFolder = projectItemSearch(folderName,"folder");    if (!currFolder) return false;    for (var i = 1; i <= currFolder.numItems; i++) {        myElem = currFolder.items[i];        if ((myElem.name === name) && (myElem instanceof CompItem)) return myElem;    }    return false;}function projectItemSearch (name, type) {    var items = app.project.items;    var result = itemSearchVec(items, name, type);    if (result.length >0) return result[0];    return false;}function itemSearch(items,name, type) {    var result = itemSearchVec(items, name, type);    if (result.length >0) return result[0];    return false;}function itemSearchVec(items,name, type) {    if ( (type == "") || (type == null) ) {        type = "comp";    }    if ( (items == undefined) || (items == null) ) items = app.project.items;    var result = [];    for (var i = 1; i <= items.length; i++){      myElem = items[i];      if (myElem.name === name) {        switch(type) {            case "solid":                if ( (myElem.mainSource != null) && (myElem.mainSource != undefined) && (myElem.mainSource instanceof SolidSource) ) {                    result.push(myElem);                }                break;            case "comp":                if (myElem instanceof CompItem) result.push(myElem);                break;            case "folder":                if (myElem instanceof FolderItem) result.push(myElem);                break;            }        }    }    return result;}function projectItemSearchVec(name, type) {    var items = app.project.items;    return itemSearchVec(items, name, type);}    